


window.dataLayer = window.dataLayer || [];
function gtag() { dataLayer.push(arguments); }

gtag('js', new Date());

gtag('config', 'G-3D07VCWRXT', {
    debug_mode: true // 游녣 Activa DebugView en GA4
})

document.addEventListener('DOMContentLoaded', () => {

    const gaCookie = document.cookie.split('; ').find(row => row.startsWith('_ga='));
    if (gaCookie) {
        const parts = gaCookie.split('.');
        const clientId = parts.slice(-2).join('.');
        localStorage.setItem('ga_client_id', clientId);
    }

    // Mostrar formulario
    document.getElementById("botonComienzo").addEventListener("click", () => {
        document.querySelector('.contenedorBienvenida').style.display = 'none';
        document.querySelector('.contenedorForm').style.display = 'block';
        showStep(currentStep);
    });

    const steps = document.querySelectorAll(".step");
    let currentStep = 0;

    function showStep(index) {
        steps.forEach((step, i) => {
            step.classList.toggle("active", i === index);
            if (i === index) {
                if (steps[index]) {
                    const paso = steps[index].id;
                    window.ultimoPaso = paso;
                    localStorage.setItem("ultimo_step", paso);
                }
            }
        });

        const nextButton = steps[index].querySelector(".nextBtn");
        if (nextButton) nextButton.disabled = true;
    }


    function validateStep() {
        const current = steps[currentStep];
        const radios = current.querySelectorAll('input[type="radio"]');
        const inputs = current.querySelectorAll('input[type="number"], input[type="email"], select');

        if (radios.length) return Array.from(radios).some(r => r.checked);

        for (let input of inputs) {
            if (input.required && input.value.trim() === '') return false;
            if (input.type === 'email' && input.value && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(input.value)) {
                Swal.fire('Email inv치lido', 'Ingres치 un correo v치lido o dej치 el campo vac칤o.', 'warning');
                return false;
            }
            if (input.name === 'edad' && (input.value < 18 || input.value > 99)) {
                Swal.fire('Edad inv치lida', 'Deb칠s tener entre 18 y 99 a침os.', 'warning');
                return false;
            }
        }
        return true;
    }

    document.addEventListener("click", (e) => {
        if (e.target.classList.contains("nextBtn")) {
            if (!validateStep()) {
                Swal.fire('Faltan datos', 'Complet치 este paso antes de continuar.', 'warning');
                return;
            }

            const pasoActual = e.target.closest(".step");
            if (pasoActual && pasoActual.id) {
                window.ultimoPaso = pasoActual.id;
                localStorage.setItem("ultimo_step", pasoActual.id);
            }

            currentStep++;
            showStep(currentStep);
            // console.log('Paso actual al salir:', pasoActual.id)
        }

        if (e.target.classList.contains("prevBtn")) {
            currentStep--;
            showStep(currentStep);
        }

        if (e.target.type === "submit") {
            window.formularioEnviado = true;
            localStorage.setItem("formulario_enviado", "true");
        }
    });

    document.getElementById("chinaForm").addEventListener("submit", (e) => {
        e.preventDefault(); // Prevenir comportamiento por defecto

        const form = e.target;
        const formData = new FormData(form);
        const submitBtn = form.querySelector('#submitBtn');

        // Bloquear bot칩n y mostrar "Enviando..."
        submitBtn.disabled = true;
        const originalText = submitBtn.textContent;
        submitBtn.textContent = "Enviando...";

        const jsonData = {};
        formData.forEach((value, key) => {
            jsonData[key] = value;
        });

        // Agregar client_id de GA
        const clientId = localStorage.getItem("ga_client_id");
        if (clientId) {
            jsonData.client_id = clientId;
        }

        fetch("enviar.php", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(jsonData)
        })
            .then(res => res.json())
            .then(data => {
                // Marcar como enviado
                window.formularioEnviado = true;
                localStorage.setItem("formulario_enviado", "true");

                // Evento GA4: formulario_completado
                if (clientId) {
                    const measurementId = 'G-3D07VCWRXT';
                    const apiSecret = 'LHIL9fY3Svuhvw8JfCktnQ';

                    navigator.sendBeacon(
                        `https://www.google-analytics.com/mp/collect?measurement_id=${measurementId}&api_secret=${apiSecret}`,
                        JSON.stringify({
                            client_id: clientId,
                            events: [{
                                name: "formulario_completado_api",
                                params: {
                                    completado: true
                                }
                            }]
                        })
                    );
                }

                Swal.fire({
                    icon: 'success',
                    title: '춰Gracias por participar!',
                    text: 'Tu respuesta fue registrada exitosamente.',
                    confirmButtonText: 'Aceptar'
                }).then(() => {
                    window.location.href = "gracias.html";
                });
            })
            .catch(err => {
                console.error("Error al enviar:", err);
                Swal.fire("Error", "Hubo un problema al enviar el formulario.", "error");

                // Restaurar bot칩n
                submitBtn.disabled = false;
                submitBtn.textContent = originalText;
            });
    });


    // Enviar abandono_inmediato por Measurement Protocol
    function enviarEventoAbandono() {
        if (window.formularioEnviado) return;

        const paso = window.ultimoPaso || 'step_1';
        const apiSecret = 'LHIL9fY3Svuhvw8JfCktnQ';
        const measurementId = 'G-3D07VCWRXT';
        const clientId = localStorage.getItem('ga_client_id');

        if (!clientId) return;

        navigator.sendBeacon(
            `https://www.google-analytics.com/mp/collect?measurement_id=${measurementId}&api_secret=${apiSecret}`,
            JSON.stringify({
                client_id: clientId,
                events: [{
                    name: 'abandono_inmediato_api',
                    params: {
                        paso_actual: paso
                    }
                }]
            })
        );

        window.dataLayer = window.dataLayer || [];
        window.dataLayer.push({
            event: 'abandono_encuesta',
            ultimo_step_alcanzado: paso
        });

        console.log('Paso actual al salir:', paso)
    }

    // M치s confiable que beforeunload
    document.addEventListener('visibilitychange', () => {
        if (document.visibilityState === 'hidden') {
            enviarEventoAbandono();
        }

    });

    // // Como backup
    // window.addEventListener('beforeunload', () => {
    //     enviarEventoAbandono();
    // });

    // Habilitar botones "Siguiente" seg칰n inputs
    showStep(currentStep);
    document.querySelectorAll('.nextBtn').forEach(btn => btn.disabled = true);

    steps.forEach((step) => {
        const radios = step.querySelectorAll('input[type="radio"]');
        const numberInput = step.querySelector('input[type="number"]');
        const select = step.querySelector('select');

        if (radios.length) {
            radios.forEach(radio => {
                radio.addEventListener('change', () => {
                    step.querySelector('.nextBtn').disabled = false;
                });
            });
        }

        if (numberInput) {
            numberInput.addEventListener('input', () => {
                const edad = parseInt(numberInput.value, 10);
                step.querySelector('.nextBtn').disabled = !(edad >= 18 && edad <= 99);
            });
        }

        if (select) {
            select.addEventListener('change', () => {
                step.querySelector('.nextBtn').disabled = select.value === '';
            });
        }
    });




});

